package tg

import (
	"TarotBot/internal/infrastructure/logger"
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"time"
)

const (
	cooldownDuration    = 30 * time.Second
	maxUserPromptLength = 350
	//responses
	overMaxPromtLength = "‚ö†Ô∏è –•–º, –º–Ω–æ–≥–æ–≤–∞—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º!"
	afterStart         = "üíú –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–¥—Ä–µ–π, –∏ —è –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º —Ç–∞—Ä–æ–ª–æ–≥–æ–º!\n\n‚û°Ô∏è –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É '/rasclad', —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å..."
	sendMsgForRasclad  = "‚û°Ô∏è –ò—Ç–∞–∫, —è —Ç–µ–±—è —Å–ª—É—à–∞—é. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –¥–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞... –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?"
	unknownMsg         = "‚û°Ô∏è –Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é... –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /rasclad"
	timeWarning        = "‚ö†Ô∏è –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å! –¢—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—à—å –∫–æ–º–∞–Ω–¥—É /rasclad"
	//commands
	commandStart   = "start"
	commandRasclad = "rasclad"
)

func (b *Bot) handleMessage(ctx context.Context, message *tgbotapi.Message) {
	l := logger.FromContext(ctx)
	l.Infow("—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", message.From.UserName, "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", message.Text)

	if promptActive, ok := b.waitingForUserPrompt[message.Chat.ID]; ok && promptActive {
		userPrompt := message.Text

		if len(userPrompt) > maxUserPromptLength {
			l.Warnw("—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç", "–¥–ª–∏–Ω–∞", len(userPrompt), "–º–∞–∫—Å–∏–º—É–º", maxUserPromptLength)
			errorMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("%s\n–†–∞–∑–º–µ—Ä —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å %d —Å–∏–º–≤–æ–ª–æ–≤!", overMaxPromtLength, maxUserPromptLength))
			_, err := b.bot.Send(errorMsg)
			if err != nil {
				l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª–∏–Ω—ã", "–æ—à–∏–±–∫–∞", err, "—Å–æ–æ–±—â–µ–Ω–∏–µ", errorMsg)
			}
			return
		}

		delete(b.waitingForUserPrompt, message.Chat.ID)

		messages, err := b.Servicer.Rasclad(ctx, userPrompt)
		if err != nil {
			l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "–æ—à–∏–±–∫–∞", err)
			errMsg := tgbotapi.NewMessage(message.Chat.ID, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
			_, _ = b.bot.Send(errMsg)
			return
		}

		for _, msg := range messages {
			switch v := msg.(type) {
			case *tgbotapi.MessageConfig:
				v.ChatID = message.Chat.ID
				_, err = b.bot.Send(*v)
				if err != nil {
					l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–æ—à–∏–±–∫–∞", err, "—Å–æ–æ–±—â–µ–Ω–∏–µ", msg)
				}
			case tgbotapi.MediaGroupConfig:
				v.ChatID = message.Chat.ID
				_, err = b.bot.Send(v)
				if err != nil {
					l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É", "–æ—à–∏–±–∫–∞", err, "–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞", v)
				}
			default:
				l.Errorw("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è", "–æ—à–∏–±–∫–∞", msg)
			}
		}
		return
	}

	l.Info("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
	msg := tgbotapi.NewMessage(message.Chat.ID, unknownMsg)
	_, _ = b.bot.Send(msg)
}

func (b *Bot) handleCommand(ctx context.Context, message *tgbotapi.Message) error {
	l := logger.FromContext(ctx)
	l.Infow("—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", message.From.UserName, "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", message.Text)

	switch message.Command() {
	case commandStart:
		msg := tgbotapi.NewMessage(message.Chat.ID, afterStart)
		_, err := b.bot.Send(msg)
		if err != nil {
			l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–æ—à–∏–±–∫–∞", err, "—Å–æ–æ–±—â–µ–Ω–∏–µ", msg)
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %w", err)
		}
		return nil
	case commandRasclad:
		if !b.checkRascladRateLimit(message.Chat.ID) {
			msg := tgbotapi.NewMessage(message.Chat.ID, timeWarning)
			_, _ = b.bot.Send(msg)
			l.Warnw("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rasclad —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", "chatID", message.Chat.ID)
			return nil
		}

		promptMsg := tgbotapi.NewMessage(message.Chat.ID, sendMsgForRasclad)
		_, err := b.bot.Send(promptMsg)
		if err != nil {
			l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "–æ—à–∏–±–∫–∞", err, "—Å–æ–æ–±—â–µ–Ω–∏–µ", promptMsg)
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–æ–ø—Ä–æ—Å–∞: %w", err)
		}

		b.waitingForUserPrompt[message.Chat.ID] = true

		return nil

	default:
		errMsg := tgbotapi.NewMessage(message.Chat.ID, unknownMsg)
		_, err := b.bot.Send(errMsg)
		if err != nil {
			l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ", "–æ—à–∏–±–∫–∞", err, "—Å–æ–æ–±—â–µ–Ω–∏–µ", errMsg)
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ: %w", err)
		}
		return nil
	}
}

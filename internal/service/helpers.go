package service

import (
	"TarotBot/internal/domain/tarot"
	"TarotBot/internal/infrastructure/logger"
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/minio/minio-go/v7"
	"io"
	"math/rand"
	"strings"
	"time"
)

const (
	defaultInitialPromt = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç. –¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –µ–≥–æ –∑–∞–ø—Ä–æ—Å. –ë—É–¥—å –ø—Ä—è–º—ã–º, —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–º, –≥–æ–≤–æ—Ä–∏ —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä—è–º–æ, –Ω–µ –±–æ–π—Å—è –∑–∞–¥–µ—Ç—å –∏–ª–∏ –æ–±–∏–¥–µ—Ç—å. –ù–µ –ª–µ–π –≤–æ–¥—ã –∏ –∏–∑–±–µ–≥–∞–π –ø–∞—Ñ–æ—Å–∞, —Ç—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ —Å–º–∞–π–ª–∏–∫–∞ \"üîÆ\". –ù–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∏ –Ω–µ –ø—Ä–æ—â–∞–π—Å—è - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –¥–µ–ª—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 800 –¥–æ 1000."
	defaultBucketName   = "tarot-images"
	maxCards            = 3
	afterRascladCommand = "üîÆ –ò—Ç–∞–∫, –Ω–∞—á–Ω–µ–º. –ë—É–¥–µ–º –≥–∞–¥–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã –¢–∞—Ä–æ –ú–∞–Ω–∞—Ä–∞:\n\n"
	replyPromt          = "üìù –¢—ã —Å–ø—Ä–æ—Å–∏–ª:\n"
	listCards           = "üïØ –¢–µ–±–µ –≤—ã–ø–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:\n\n"
	interpretation      = "‚û°Ô∏è –ß—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏—Ç—å?\n\n"
)

func (s *Service) formatRasclad(ctx context.Context, userPromt string, cards []tarot.Card) ([]tgbotapi.Chattable, error) {
	l := logger.FromContext(ctx)
	var messages []tgbotapi.Chattable

	var sb strings.Builder
	formCards := s.formatCards(sb, cards)
	l.Infow("–∫–∞—Ä—Ç—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã", formCards)

	genResult, err := s.AiAdapter.GeneratePrediction(ctx, userPromt, defaultInitialPromt, formCards)
	if err != nil {
		l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–æ—à–∏–±–∫–∞", err)
		return nil, fmt.Errorf("formatRasclad: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: %w", err)
	}

	l.Infow("–ø–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç apiGen", "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", genResult)

	sb.WriteString(afterRascladCommand)
	sb.WriteString(replyPromt)
	sb.WriteString(userPromt)
	sb.WriteString(listCards)
	sb.WriteString(formCards)
	firstMessageText := sb.String()

	mediaGroup, hasImages := s.createMediaGroup(ctx, cards, firstMessageText)

	if hasImages {
		mediaGroupConfig := tgbotapi.NewMediaGroup(0, mediaGroup)
		messages = append(messages, mediaGroupConfig)

	} else {
		l.Info("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
		textMessage := tgbotapi.NewMessage(0, firstMessageText)
		messages = append(messages, &textMessage)
	}

	interpretationText := fmt.Sprintf("%s%s", interpretation, genResult)
	interpretationMessage := tgbotapi.NewMessage(0, interpretationText)
	messages = append(messages, &interpretationMessage)

	return messages, nil
}

func (s *Service) makeSpread(deck tarot.Deck) []tarot.Card {
	keys := make([]int, len(deck))
	resultCards := make([]tarot.Card, maxCards)

	for i := 0; i < len(deck); i++ {
		keys[i] = i
	}

	rand.Seed(time.Now().UnixNano())
	rand.Shuffle(len(keys), func(i, j int) {
		keys[i], keys[j] = keys[j], keys[i]
	})

	for i := 0; i < maxCards; i++ {
		resultCards[i] = deck[keys[i]]
	}

	return resultCards
}

func (s *Service) createMediaGroup(ctx context.Context, cards []tarot.Card, caption string) ([]interface{}, bool) {
	l := logger.FromContext(ctx)
	mediaGroup := make([]interface{}, 0, len(cards))
	firstImageCaptionSet := false

	for i, card := range cards {
		imageBytes, err := s.getS3ImageBytes(ctx, card.ID, defaultBucketName)
		if err != nil {
			l.Errorw("–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∑—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã", "–∫–∞—Ä—Ç–∞", card.ID, "–æ—à–∏–±–∫–∞", err)
			continue
		}

		photo := tgbotapi.FileBytes{Name: fmt.Sprintf("%d.jpg", card.ID), Bytes: imageBytes}
		photoMessage := tgbotapi.NewInputMediaPhoto(photo)

		if i == 0 && !firstImageCaptionSet && caption != "" {
			l.Info("—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ caption –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
			photoMessage.Caption = caption
			firstImageCaptionSet = true
		}

		mediaGroup = append(mediaGroup, photoMessage)
	}

	return mediaGroup, len(mediaGroup) > 0
}

func (s *Service) formatCards(sb strings.Builder, cards []tarot.Card) string {
	for _, c := range cards {
		sb.WriteString(fmt.Sprintf("‚ùóÔ∏è%s:\n%s\n\n", c.Title, c.Description))
	}

	return sb.String()
}

func (s *Service) getS3ImageBytes(ctx context.Context, cardID int64, bucket string) ([]byte, error) {
	l := logger.FromContext(ctx)
	key := fmt.Sprintf("%d.jpg", cardID)

	object, err := s.ObjectRepoAdapter.GetObject(ctx, bucket, key, minio.GetObjectOptions{})
	if err != nil {
		l.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ MiniO cardID: %d, bucket: %s, key: %s", cardID, bucket, key)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ %s –∏–∑ Minio: %w", key, err)
	}
	defer object.Close()

	imageData, err := io.ReadAll(object)
	if err != nil {
		l.Errorw("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–æ—à–∏–±–∫–∞", err, "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", key)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è %s: %w", key, err)
	}

	l.Infof("—É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ cardID: %d", cardID)
	return imageData, nil
}
